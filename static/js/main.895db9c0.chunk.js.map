{"version":3,"sources":["components/ContactForm/ContactForm.styles.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styles.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styles.jsx","components/ContactList/ContactList.jsx","components/Container/Container.styles.jsx","components/Container/Container.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Form","styled","form","Label","label","Input","input","Button","button","ContactForm","state","name","number","idInputName","uuidv4","idInputNumber","handleInputChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","resetForm","this","htmlFor","onChange","type","id","autoComplete","placeholder","pattern","title","required","disabled","Component","Filter","ContactsList","ul","ContactListItem","li","ContactListText","p","BtnDel","ContactList","contacts","onDelete","map","onClick","Container","div","Section","children","App","filter","formSubmitHandle","entry","some","contact","alert","prevState","changeFilter","getVisibleContacts","normalizedFilter","toLowerCase","includes","deleteContact","contactId","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","visibleContacts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.895db9c0.chunk.js","sourcesContent":["import styled from '@emotion/styled'\r\nexport const Form = styled.form``\r\nexport const Label = styled.label`\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  justify-content: center;\r\n  padding-bottom: 15px;\r\n  margin: 0;\r\n`\r\nexport const Input = styled.input`\r\n  display: flex;\r\n  padding: 6px;\r\n  margin-bottom: 20px;\r\n  border-radius: 5px;\r\n  min-width: 300px;\r\n  cursor: pointer;\r\n  box-shadow: rgba(38, 38, 112, 0.25) 0px 50px 100px -20px,\r\n    rgba(34, 74, 114, 0.35) 0px -2px 6px 0px inset;\r\n  &:focus {\r\n    border: 2px solid #928ec7;\r\n    outline: none;\r\n  }\r\n`\r\nexport const Button = styled.button`\r\n  background-color: #ebedf32c;\r\n  color: #161127;\r\n  border: none;\r\n  padding: 8px 16px;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  font-weight: bold;\r\n  text-transform: uppercase;\r\n  cursor: pointer;\r\n  border-radius: 4px;\r\n  border: 2px solid #1f3d9e30;\r\n  box-shadow: 0 12px 16px 0 #278cbb3d, 0 17px 50px 0 #1f3d9e30;\r\n  &:hover {\r\n    border-radius: 4px;\r\n    background-color: #020c2b2c;\r\n    transition-duration: 250ms;\r\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n    box-shadow: 0 12px 16px 0 #278cbb3d, 0 17px 50px 0 #1f3d9e30;\r\n  }\r\n`\r\n","import { Component } from 'react'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport PropTypes from 'prop-types'\r\nimport { Form, Label, Input, Button } from './ContactForm.styles'\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  }\r\n  idInputName = uuidv4()\r\n  idInputNumber = uuidv4()\r\n\r\n  handleInputChange = (e) => {\r\n    const { name, value } = e.currentTarget\r\n    this.setState({ [name]: value })\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    this.props.onSubmit(this.state)\r\n    this.resetForm()\r\n  }\r\n\r\n  resetForm = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { name, number } = this.state\r\n    return (\r\n      <Form onSubmit={this.handleSubmit}>\r\n        <Label htmlFor={this.idInputName}>\r\n          Name\r\n          <Input\r\n            onChange={this.handleInputChange}\r\n            type=\"text\"\r\n            id={this.idInputName}\r\n            name=\"name\"\r\n            autoComplete=\"off\"\r\n            placeholder=\"Enter name\"\r\n            value={name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </Label>\r\n        <Label htmlFor={this.idInputNumber}>\r\n          Number\r\n          <Input\r\n            onChange={this.handleInputChange}\r\n            type=\"tel\"\r\n            id={this.idInputNumber}\r\n            name=\"number\"\r\n            autoComplete=\"off\"\r\n            placeholder=\"Enter number\"\r\n            value={this.state.number}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </Label>\r\n        <Button type=\"submit\" disabled={!name || !number}>\r\n          Add contact\r\n        </Button>\r\n      </Form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ContactForm\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n}\r\n","import styled from '@emotion/styled'\r\nexport const Label = styled.label`\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  justify-content: center;\r\n  padding-bottom: 15px;\r\n  margin: 0;\r\n`\r\nexport const Input = styled.input`\r\n  display: flex;\r\n  padding: 6px;\r\n  margin-bottom: 20px;\r\n  border-radius: 5px;\r\n  min-width: 300px;\r\n  cursor: pointer;\r\n  box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px,\r\n    rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset;\r\n  &:focus {\r\n    border: 2px solid #eee;\r\n    outline: none;\r\n  }\r\n`\r\n","import { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Label, Input } from './Filter.styles'\r\n\r\nclass Filter extends Component {\r\n  render() {\r\n    const { onChange } = this.props\r\n    return (\r\n      <Label>\r\n        Find contacts by name:\r\n        <Input onChange={onChange} type=\"text\" name=\"filter\"></Input>\r\n      </Label>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Filter\r\n\r\nFilter.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n}\r\n","import styled from '@emotion/styled'\r\nexport const ContactsList = styled.ul`\r\n  padding: 0;\r\n`\r\nexport const ContactListItem = styled.li`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\nexport const ContactListText = styled.p`\r\n  font-size: 18px;\r\n  line-height: 20px;\r\n  font-weight: bold;\r\n  word-break: break-all;\r\n`\r\nexport const BtnDel = styled.button`\r\n  margin-left: auto;\r\n  background-color: #ebedf32c;\r\n  color: #161127;\r\n  border: none;\r\n  padding: 6px 12px;\r\n  font-size: 12px;\r\n  line-height: 14px;\r\n  cursor: pointer;\r\n  border-radius: 4px;\r\n  border: 2px solid #1f3d9e30;\r\n  box-shadow: 0 12px 16px 0 #278cbb3d, 0 17px 50px 0 #1f3d9e30;\r\n  &:hover {\r\n    border-radius: 4px;\r\n    background-color: #020c2b2c;\r\n    transition-duration: 250ms;\r\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n    box-shadow: 0 12px 16px 0 #278cbb3d, 0 17px 50px 0 #1f3d9e30;\r\n  }\r\n`\r\n","import PropTypes from 'prop-types'\r\nimport {\r\n  ContactsList,\r\n  ContactListItem,\r\n  ContactListText,\r\n  BtnDel,\r\n} from './ContactList.styles'\r\n\r\nexport default function ContactList({ contacts, onDelete }) {\r\n  return (\r\n    <ContactsList>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <ContactListItem key={id}>\r\n          <ContactListText>\r\n            {name}:&nbsp;{number}\r\n          </ContactListText>\r\n          <BtnDel onClick={() => onDelete(id)}>Delete</BtnDel>\r\n        </ContactListItem>\r\n      ))}\r\n    </ContactsList>\r\n  )\r\n}\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ).isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n}\r\n","import styled from '@emotion/styled'\r\nexport const Container = styled.div`\r\n  max-width: 350px;\r\n  margin-top: 30px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  padding: 15px 20px;\r\n  background-color: #cfcfe6;\r\n  border: 2mm ridge #1c2e9499;\r\n  box-shadow: 0 5px 5px #0000008c;\r\n  border-radius: 15px;\r\n  color: #161127;\r\n`\r\n","import PropTypes from 'prop-types'\r\nimport { Container } from './Container.styles'\r\n\r\nexport default function Section({ children }) {\r\n  return <Container>{children}</Container>\r\n}\r\n\r\nSection.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n}\r\n","import { Component } from 'react'\nimport { v4 as uuidv4 } from 'uuid'\nimport contacts from './data/Contacts.json'\nimport ContactForm from './components/ContactForm/ContactForm'\nimport Filter from './components/Filter/Filter'\nimport ContactList from './components/ContactList/ContactList'\nimport Container from './components/Container/Container'\n\nclass App extends Component {\n  state = {\n    contacts: contacts,\n    filter: '',\n  }\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts')\n    if (contacts) {\n      this.setState({ contacts: JSON.parse(contacts) })\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    const { contacts } = this.state\n    if (contacts !== prevState.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(contacts))\n    }\n  }\n\n  formSubmitHandle = ({ name, number }) => {\n    const { contacts } = this.state\n    const entry = {\n      id: uuidv4(),\n      name,\n      number,\n    }\n    if (contacts.some((contact) => contact.name === name)) {\n      alert(`${name} is already in the contacts.`)\n      return\n    }\n    this.setState((prevState) => ({\n      ...prevState,\n      contacts: [entry, ...prevState.contacts],\n    }))\n  }\n  changeFilter = (e) => {\n    this.setState({ filter: e.currentTarget.value })\n  }\n\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state\n    const normalizedFilter = filter.toLowerCase()\n\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    )\n  }\n  deleteContact = (contactId) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(\n        (contact) => contact.id !== contactId,\n      ),\n    }))\n  }\n\n  render() {\n    const { filter } = this.state\n    const visibleContacts = this.getVisibleContacts()\n    return (\n      <Container>\n        <h2>Phonebook</h2>\n        <ContactForm onSubmit={this.formSubmitHandle} />\n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={this.changeFilter} />\n        <ContactList contacts={visibleContacts} onDelete={this.deleteContact} />\n      </Container>\n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}